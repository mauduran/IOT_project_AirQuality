
service: microservices

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-east-1
  profile: serverless-user
  environment:
      tableName: ${self:custom.tableName}
      tokenSecret: ${self:custom.tokenSecret}
      region: ${self:provider.region}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
            - s3:*
            - ses:*
            - sns:*
          Resource: '*'
  apiGateway:
    apiKeys:
      - adminApiKey

plugins:
    - serverless-webpack
    - serverless-offline

package:
    individually: true

custom:
  tableName: x
  tokenSecret: x

  webpack:
    webpackConfig: ./webpack.config.js
    concurrency: ${opt:compile-concurrency, 6}


functions:
  createAccount:
    handler: lambdas/endpoints/accounts/CreateAccount.handler
    events:
      - http:
            path: account/
            method: POST
            cors: true
  accountLogin:
    handler: lambdas/endpoints/accounts/AccountLogin.handler
    events:
      - http:
            path: account/login
            method: POST
            cors: true
  getUser:
    handler: lambdas/endpoints/accounts/GetAccount.handler
    events:
        - http:
              path: accounts/account
              method: GET
              cors: true
        - http:
              path: accounts/{accountName}
              method: GET
              cors: true

  registerPhoneNumber:
        handler: lambdas/endpoints/accounts/RegisterPhoneNumber.handler
        events:
            - http:
                  path: account/phone/register
                  method: POST
                  cors: true

  verifyPhoneNumber:
        handler: lambdas/endpoints/accounts/VerifyPhoneNumber.handler
        events:
            - http:
                  path: account/phone/verify
                  method: POST
                  cors: true

  changePassword:
    handler: lambdas/endpoints/accounts/ChangePassword.handler
    events:
      - http:
            path: account/change-password
            method: POST
            cors: true

  changeDescription:
    handler: lambdas/endpoints/accounts/ChangeDescription.handler
    events:
      - http:
            path: account/description
            method: PUT
            cors: true

  changeTitle:
    handler: lambdas/endpoints/accounts/ChangeTitle.handler
    events:
      - http:
            path: account/title
            method: PUT
            cors: true

  StoreSensorData:
    handler: lambdas/endpoints/sensors/StoreSensorData.handler
    events:
      - http:
            path: /{sensorType}
            method: POST
            cors: true
            private: true

  GetAllSensorData:
    handler: lambdas/endpoints/sensors/GetAllSensorData.handler
    events:
      - http:
            path: /{sensorType}
            method: GET
            cors: true

  GetDailySensorData:
    handler: lambdas/endpoints/sensors/GetDailySensorData.handler
    events:
      - http:
            path: /{sensorType}/{year}/{month}/{day}
            method: GET
            cors: true

  GetLastSensorData:
    handler: lambdas/endpoints/sensors/GetLastSensorData.handler
    events:
      - http:
            path: /{sensorType}/most-recent
            method: GET
            cors: true   

  GetMonthlySensorData:
    handler: lambdas/endpoints/sensors/GetMonthlySensorData.handler
    events:
      - http:
            path: /{sensorType}/{year}/{month}
            method: GET
            cors: true
       
  GetWeeklySensorData:
    handler: lambdas/endpoints/sensors/GetWeeklySensorData.handler
    events:
      - http:
            path: /{sensorType}/week/{offset}
            method: GET
            cors: true

  sendSMS:
    handler: lambdas/endpoints/sms/sendSMS.handler
    events:
      - http:
            path: send-sms/
            method: POST
            cors: true
            private: true 
