
service: microservices

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-east-1
  profile: serverless-user
  environment:
      tableName: ${self:custom.tableName}
      tokenSecret: ${self:custom.tokenSecret}
      region: ${self:provider.region}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
            - s3:*
            - ses:*
            - sns:*
          Resource: '*'
  apiGateway:
    apiKeys:
      - adminApiKey

plugins:
    - serverless-webpack
    - serverless-offline

package:
    individually: true

custom:
  # tableName: x
  # tokenSecret: x
  tableName: IoT_AirQuality_Table
  tokenSecret: AYWOW_AMAZING!

  webpack:
    webpackConfig: ./webpack.config.js


functions:
  createAccount:
    handler: lambdas/endpoints/accounts/CreateAccount.handler
    events:
      - http:
            path: account/
            method: POST
            cors: true
  accountLogin:
    handler: lambdas/endpoints/accounts/AccountLogin.handler
    events:
      - http:
            path: account/login
            method: POST
            cors: true
  getUser:
    handler: lambdas/endpoints/accounts/GetAccount.handler
    events:
        - http:
              path: accounts/account
              method: GET
              cors: true
        - http:
              path: accounts/{accountName}
              method: GET
              cors: true
  addPhoneNumber:
        handler: lambdas/endpoints/accounts/UpdateAccountPhoneNumber.handler
        events:
            - http:
                  path: account/phone
                  method: PUT
                  cors: true
  changePassword:
    handler: lambdas/endpoints/accounts/ChangePassword.handler
    events:
      - http:
            path: account/change-password
            method: POST
            cors: true

  changeDescription:
    handler: lambdas/endpoints/accounts/ChangeDescription.handler
    events:
      - http:
            path: account/description
            method: PUT
            cors: true
  
  StoreTemperature:
    handler: lambdas/endpoints/sensors/temperature/StoreTemperature.handler
    events:
      - http:
            path: temperature/
            method: POST
            cors: true
            private: true
  GetTemperatures:
    handler: lambdas/endpoints/sensors/temperature/GetTemperatures.handler
    events:
      - http:
            path: temperature/
            method: GET
            cors: true
  GetLastTemperature:
    handler: lambdas/endpoints/sensors/temperature/GetLastTemperature.handler
    events:
      - http:
            path: temperature/most-recent
            method: GET
            cors: true
  sendSMS:
    handler: lambdas/endpoints/sms/sendSMS.handler
    events:
      - http:
            path: send-sms/
            method: POST
            cors: true
            private: true 
